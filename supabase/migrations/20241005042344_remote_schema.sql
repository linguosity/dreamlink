create table "public"."dream_analyses" (
    "id" uuid not null default uuid_generate_v4(),
    "user_id" uuid,
    "title" text not null,
    "original_dream" text not null,
    "gematria_interpretation" text,
    "color_symbolism" text,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "topic_sentence" text
);


create table "public"."dream_entries" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "analysis" jsonb not null,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "dream_analysis_id" uuid
);


create table "public"."dream_tags" (
    "dream_analysis_id" uuid not null,
    "tag_id" uuid not null
);


create table "public"."interpretation_elements" (
    "id" uuid not null default uuid_generate_v4(),
    "dream_analysis_id" uuid,
    "content" text not null,
    "is_popover" boolean not null,
    "popover_content" text,
    "order_index" integer not null
);


create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text,
    "email" character varying(255)
);


alter table "public"."profiles" enable row level security;

create table "public"."tags" (
    "id" uuid not null default uuid_generate_v4(),
    "name" text not null
);


create table "public"."user_settings" (
    "user_id" uuid not null,
    "language" text,
    "bible_version" text,
    "created_at" timestamp with time zone default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone default timezone('utc'::text, now())
);


alter table "public"."user_settings" enable row level security;

create table "public"."users" (
    "id" uuid not null default uuid_generate_v4(),
    "email" text not null,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP
);


alter table "public"."users" enable row level security;

create table "public"."verses" (
    "id" uuid not null default uuid_generate_v4(),
    "dream_analysis_id" uuid,
    "reference" text not null,
    "text" text not null,
    "book" text,
    "explanation" text
);


CREATE UNIQUE INDEX dream_analyses_pkey ON public.dream_analyses USING btree (id);

CREATE UNIQUE INDEX dream_entries_pkey ON public.dream_entries USING btree (id);

CREATE UNIQUE INDEX dream_tags_pkey ON public.dream_tags USING btree (dream_analysis_id, tag_id);

CREATE UNIQUE INDEX interpretation_elements_pkey ON public.interpretation_elements USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX tags_name_key ON public.tags USING btree (name);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

CREATE UNIQUE INDEX user_settings_pkey ON public.user_settings USING btree (user_id);

CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX verses_pkey ON public.verses USING btree (id);

alter table "public"."dream_analyses" add constraint "dream_analyses_pkey" PRIMARY KEY using index "dream_analyses_pkey";

alter table "public"."dream_entries" add constraint "dream_entries_pkey" PRIMARY KEY using index "dream_entries_pkey";

alter table "public"."dream_tags" add constraint "dream_tags_pkey" PRIMARY KEY using index "dream_tags_pkey";

alter table "public"."interpretation_elements" add constraint "interpretation_elements_pkey" PRIMARY KEY using index "interpretation_elements_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."user_settings" add constraint "user_settings_pkey" PRIMARY KEY using index "user_settings_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."verses" add constraint "verses_pkey" PRIMARY KEY using index "verses_pkey";

alter table "public"."dream_analyses" add constraint "dream_analyses_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."dream_analyses" validate constraint "dream_analyses_user_id_fkey";

alter table "public"."dream_entries" add constraint "dream_entries_dream_analysis_id_fkey" FOREIGN KEY (dream_analysis_id) REFERENCES dream_analyses(id) ON DELETE CASCADE not valid;

alter table "public"."dream_entries" validate constraint "dream_entries_dream_analysis_id_fkey";

alter table "public"."dream_entries" add constraint "dream_entries_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."dream_entries" validate constraint "dream_entries_user_id_fkey";

alter table "public"."dream_tags" add constraint "dream_tags_dream_analysis_id_fkey" FOREIGN KEY (dream_analysis_id) REFERENCES dream_analyses(id) ON DELETE CASCADE not valid;

alter table "public"."dream_tags" validate constraint "dream_tags_dream_analysis_id_fkey";

alter table "public"."dream_tags" add constraint "dream_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) not valid;

alter table "public"."dream_tags" validate constraint "dream_tags_tag_id_fkey";

alter table "public"."interpretation_elements" add constraint "interpretation_elements_dream_analysis_id_fkey" FOREIGN KEY (dream_analysis_id) REFERENCES dream_analyses(id) ON DELETE CASCADE not valid;

alter table "public"."interpretation_elements" validate constraint "interpretation_elements_dream_analysis_id_fkey";

alter table "public"."profiles" add constraint "email_format_check" CHECK (((email)::text ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z]{2,}$'::text)) not valid;

alter table "public"."profiles" validate constraint "email_format_check";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."tags" add constraint "tags_name_key" UNIQUE using index "tags_name_key";

alter table "public"."user_settings" add constraint "user_settings_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."user_settings" validate constraint "user_settings_user_id_fkey";

alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

alter table "public"."verses" add constraint "verses_dream_analysis_id_fkey" FOREIGN KEY (dream_analysis_id) REFERENCES dream_analyses(id) ON DELETE CASCADE not valid;

alter table "public"."verses" validate constraint "verses_dream_analysis_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url');
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = timezone('utc', now());
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."dream_analyses" to "anon";

grant insert on table "public"."dream_analyses" to "anon";

grant references on table "public"."dream_analyses" to "anon";

grant select on table "public"."dream_analyses" to "anon";

grant trigger on table "public"."dream_analyses" to "anon";

grant truncate on table "public"."dream_analyses" to "anon";

grant update on table "public"."dream_analyses" to "anon";

grant delete on table "public"."dream_analyses" to "authenticated";

grant insert on table "public"."dream_analyses" to "authenticated";

grant references on table "public"."dream_analyses" to "authenticated";

grant select on table "public"."dream_analyses" to "authenticated";

grant trigger on table "public"."dream_analyses" to "authenticated";

grant truncate on table "public"."dream_analyses" to "authenticated";

grant update on table "public"."dream_analyses" to "authenticated";

grant delete on table "public"."dream_analyses" to "service_role";

grant insert on table "public"."dream_analyses" to "service_role";

grant references on table "public"."dream_analyses" to "service_role";

grant select on table "public"."dream_analyses" to "service_role";

grant trigger on table "public"."dream_analyses" to "service_role";

grant truncate on table "public"."dream_analyses" to "service_role";

grant update on table "public"."dream_analyses" to "service_role";

grant delete on table "public"."dream_entries" to "anon";

grant insert on table "public"."dream_entries" to "anon";

grant references on table "public"."dream_entries" to "anon";

grant select on table "public"."dream_entries" to "anon";

grant trigger on table "public"."dream_entries" to "anon";

grant truncate on table "public"."dream_entries" to "anon";

grant update on table "public"."dream_entries" to "anon";

grant delete on table "public"."dream_entries" to "authenticated";

grant insert on table "public"."dream_entries" to "authenticated";

grant references on table "public"."dream_entries" to "authenticated";

grant select on table "public"."dream_entries" to "authenticated";

grant trigger on table "public"."dream_entries" to "authenticated";

grant truncate on table "public"."dream_entries" to "authenticated";

grant update on table "public"."dream_entries" to "authenticated";

grant delete on table "public"."dream_entries" to "service_role";

grant insert on table "public"."dream_entries" to "service_role";

grant references on table "public"."dream_entries" to "service_role";

grant select on table "public"."dream_entries" to "service_role";

grant trigger on table "public"."dream_entries" to "service_role";

grant truncate on table "public"."dream_entries" to "service_role";

grant update on table "public"."dream_entries" to "service_role";

grant delete on table "public"."dream_tags" to "anon";

grant insert on table "public"."dream_tags" to "anon";

grant references on table "public"."dream_tags" to "anon";

grant select on table "public"."dream_tags" to "anon";

grant trigger on table "public"."dream_tags" to "anon";

grant truncate on table "public"."dream_tags" to "anon";

grant update on table "public"."dream_tags" to "anon";

grant delete on table "public"."dream_tags" to "authenticated";

grant insert on table "public"."dream_tags" to "authenticated";

grant references on table "public"."dream_tags" to "authenticated";

grant select on table "public"."dream_tags" to "authenticated";

grant trigger on table "public"."dream_tags" to "authenticated";

grant truncate on table "public"."dream_tags" to "authenticated";

grant update on table "public"."dream_tags" to "authenticated";

grant delete on table "public"."dream_tags" to "service_role";

grant insert on table "public"."dream_tags" to "service_role";

grant references on table "public"."dream_tags" to "service_role";

grant select on table "public"."dream_tags" to "service_role";

grant trigger on table "public"."dream_tags" to "service_role";

grant truncate on table "public"."dream_tags" to "service_role";

grant update on table "public"."dream_tags" to "service_role";

grant delete on table "public"."interpretation_elements" to "anon";

grant insert on table "public"."interpretation_elements" to "anon";

grant references on table "public"."interpretation_elements" to "anon";

grant select on table "public"."interpretation_elements" to "anon";

grant trigger on table "public"."interpretation_elements" to "anon";

grant truncate on table "public"."interpretation_elements" to "anon";

grant update on table "public"."interpretation_elements" to "anon";

grant delete on table "public"."interpretation_elements" to "authenticated";

grant insert on table "public"."interpretation_elements" to "authenticated";

grant references on table "public"."interpretation_elements" to "authenticated";

grant select on table "public"."interpretation_elements" to "authenticated";

grant trigger on table "public"."interpretation_elements" to "authenticated";

grant truncate on table "public"."interpretation_elements" to "authenticated";

grant update on table "public"."interpretation_elements" to "authenticated";

grant delete on table "public"."interpretation_elements" to "service_role";

grant insert on table "public"."interpretation_elements" to "service_role";

grant references on table "public"."interpretation_elements" to "service_role";

grant select on table "public"."interpretation_elements" to "service_role";

grant trigger on table "public"."interpretation_elements" to "service_role";

grant truncate on table "public"."interpretation_elements" to "service_role";

grant update on table "public"."interpretation_elements" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

grant delete on table "public"."user_settings" to "anon";

grant insert on table "public"."user_settings" to "anon";

grant references on table "public"."user_settings" to "anon";

grant select on table "public"."user_settings" to "anon";

grant trigger on table "public"."user_settings" to "anon";

grant truncate on table "public"."user_settings" to "anon";

grant update on table "public"."user_settings" to "anon";

grant delete on table "public"."user_settings" to "authenticated";

grant insert on table "public"."user_settings" to "authenticated";

grant references on table "public"."user_settings" to "authenticated";

grant select on table "public"."user_settings" to "authenticated";

grant trigger on table "public"."user_settings" to "authenticated";

grant truncate on table "public"."user_settings" to "authenticated";

grant update on table "public"."user_settings" to "authenticated";

grant delete on table "public"."user_settings" to "service_role";

grant insert on table "public"."user_settings" to "service_role";

grant references on table "public"."user_settings" to "service_role";

grant select on table "public"."user_settings" to "service_role";

grant trigger on table "public"."user_settings" to "service_role";

grant truncate on table "public"."user_settings" to "service_role";

grant update on table "public"."user_settings" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

grant delete on table "public"."verses" to "anon";

grant insert on table "public"."verses" to "anon";

grant references on table "public"."verses" to "anon";

grant select on table "public"."verses" to "anon";

grant trigger on table "public"."verses" to "anon";

grant truncate on table "public"."verses" to "anon";

grant update on table "public"."verses" to "anon";

grant delete on table "public"."verses" to "authenticated";

grant insert on table "public"."verses" to "authenticated";

grant references on table "public"."verses" to "authenticated";

grant select on table "public"."verses" to "authenticated";

grant trigger on table "public"."verses" to "authenticated";

grant truncate on table "public"."verses" to "authenticated";

grant update on table "public"."verses" to "authenticated";

grant delete on table "public"."verses" to "service_role";

grant insert on table "public"."verses" to "service_role";

grant references on table "public"."verses" to "service_role";

grant select on table "public"."verses" to "service_role";

grant trigger on table "public"."verses" to "service_role";

grant truncate on table "public"."verses" to "service_role";

grant update on table "public"."verses" to "service_role";

create policy "Users can delete own entries"
on "public"."dream_entries"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can insert own entries"
on "public"."dream_entries"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Users can only see their own entries"
on "public"."dream_entries"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Users can update own entries"
on "public"."dream_entries"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Users can view own entries"
on "public"."dream_entries"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can only see their own profile"
on "public"."profiles"
as permissive
for all
to public
using ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Allow individual users to manage their settings"
on "public"."user_settings"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Prevent deletion"
on "public"."users"
as permissive
for delete
to public
using (false);


create policy "Users can insert"
on "public"."users"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own row"
on "public"."users"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Users can view own row"
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));


CREATE TRIGGER update_user_settings_updated_at BEFORE UPDATE ON public.user_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at();


